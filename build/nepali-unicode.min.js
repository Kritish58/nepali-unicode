(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
//* mapping
const consonants = require('./mapping/consonants');
const independentVowels = require('./mapping/independentVowels');
const dependentVowels = require('./mapping/dependentVowels');
const numbers = require('./mapping/numbers');
const specialCharacters = require('./mapping/specialCharacters');

// * utils
const { getMappedValueType, combineWithInitials } = require('./utils/utils');

const MappingData = {
   ...consonants,
   ...independentVowels,
   ...dependentVowels,
   ...numbers,
   ...specialCharacters,

   kharaayo: ['0000', '1111'], //* test
};

const mapper = (input) => {
   return MappingData[input];
};

const engine = (input) => {
   let unmapped = input;
   let mapped = '';
   let output = [];

   while (unmapped.length >= 1) {
      const tempOutput = mapper(unmapped);

      if (!tempOutput) {
         unmapped = unmapped.slice(0, unmapped.length - 1);
         continue;
      }

      mapped += unmapped;
      unmapped = input.slice(mapped.length, input.length);

      const mappedValueType = getMappedValueType(tempOutput);
      if (mappedValueType === 'string') {
         output = [...output, combineWithInitials(tempOutput)];
      }
      if (mappedValueType === 'array') {
         output = [...output, tempOutput.map((item) => combineWithInitials(item)).join('')];
      }
   }

   return output;
};

const converter = (input) => {
   const unicodesInArray = engine(input);

   // * if output => return output; else return original input
   return unicodesInArray.length > 0 ? unicodesInArray.map((item) => item).join('') : input;
};

module.exports = {
   converter,
};

},{"./mapping/consonants":2,"./mapping/dependentVowels":3,"./mapping/independentVowels":4,"./mapping/numbers":5,"./mapping/specialCharacters":6,"./utils/utils":7}],2:[function(require,module,exports){
const consonants = {
   ka: '0915',
   kha: '0915',
   ga: '0917',
   gha: '0918',
   nga: '0919',
   ca: '091A',
   cha: '091B',
   ja: '091C',
   jha: '091D',
   nya: '091E',
   tta: '091F',
   ttha: '0920',
   dda: '0921',
   ddha: '0922',
   nna: '0923',
   ta: '0924',
   tha: '0925',
   da: '0926',
   dha: '0927',
   na: '0928',
   pa: '092A',
   pha: '092B',
   ba: '092C',
   bha: '092D',
   ma: '092E',
   ya: '092F',
   ra: '0930',
   la: '0932',
   va: '0935',
   sha: '0936',
   ssa: '0937',
   sa: '0938',
   ha: '0939',
};

module.exports = consonants;

},{}],3:[function(require,module,exports){
const dependentVowels = {
   aa: '093E',
   i: '093F',
   ii: '0940',
   u: '0941',
   uu: '0942',
   r: '0943',
   e: '0947',
   ai: '0948',
   o: '094B',
   au: '094C',
};

module.exports = dependentVowels;

},{}],4:[function(require,module,exports){
const independentVowels = {
   A: '0905',
   AA: '0906',
   I: '0907',
   II: '0908',
   U: '0909',
   UU: '090A',
   R: '090B',
   E: '090F',
   AI: '0910',
   O: '0913',
   AU: '0913',
};

module.exports = independentVowels;

},{}],5:[function(require,module,exports){
const numbers = {
   0: '0966',
   1: '0967',
   2: '0968',
   3: '0969',
   4: '096A',
   5: '096B',
   6: '096C',
   7: '096D',
   8: '096E',
   9: '096F',
};

module.exports = numbers;

},{}],6:[function(require,module,exports){
const specialCharacters = {
   '*': '0901',
   '|': '0964',
   '||': '0965',
};

module.exports = specialCharacters;

},{}],7:[function(require,module,exports){
const combineWithInitials = (unicode) => {
   return `&#x${unicode};`;
};

const getMappedValueType = (value) => {
   return Array.isArray(value) ? 'array' : 'string';
};

module.exports = {
   combineWithInitials,
   getMappedValueType,
};

},{}]},{},[1]);
